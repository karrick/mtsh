#! /bin/sh

# mtsh -- multiterm shell

mtsh () {
    local command debug error file first group hi host hosts length name opt prefix suffix target title
    local first length i prefix c fi suffix cl ci uniqs ct

	# NOTE: Both -g (group) and -n NAME will attempt to group sessions
	# together in a tmux window if tmux server is running. A (-g) without (-n
	# NAME) this will use the longest prefix of the hostnames combined with
	# the longest suffix of the hostnames. With (-n NAME) the tmux window will
	# be named NAME.

    while getopts ":c:df:ghn:p:s:" opt ; do
        case $opt in
            c) command=$OPTARG ;;
            d) debug=1 ;;
            f) hosts=$(tr -s '\n' ' ' < $OPTARG) || error="cannot read file: $OPTARG" ;;
            g) group=1 ;;
            h) echo "usage: mtsh [-c 'COMMAND ARG1 ARG2'] [-d] [-g] [-n NAME] [-p PREFIX] [-s SUFFIX] [-f /some/hosts/file | HOST1 [HOST2 [host3]]]"
               return 0 ;;
			n) name=$OPTARG ; group=1 ;; # name implies group
            p) prefix=$OPTARG ;;
            s) suffix=$OPTARG ;;
            :) error="missing required argument for option: -$OPTARG" ;;
            \?) error="illegal option: $OPTARG" ;;
        esac
    done
    shift $((OPTIND - 1)) ; OPTIND=1

    if [ -z "$error" ] ; then
        if [ -z "$hosts" ] ; then
            if [ $# -eq 0 ] ; then
                error="which hosts?"
            fi
        else
            if [ $# -gt 0 ] ; then
                error="specify hosts using either -f or as list of command line arguments"
            else
                set -- $hosts
                hosts=
            fi
        fi
    fi

    if [ -n "$error" ] ; then
        echo >&2 $error
        echo >&2 "usage: mtsh [-c 'COMMAND ARG1 ARG2'] [-d] [-g] [-n NAME] [-p PREFIX] [-s SUFFIX] [-f /some/hosts/file | HOST1 [HOST2 [host3]]]"
        return 2
    fi

    # When more than a single host specified, determine common prefix
    # and suffix, unless already specified.
    if [ $# -gt 1 ] ; then
        first=$1
        shift

        if [ -z "$prefix" ] ; then
            # Attempt to determine the common prefix for all of the
            # command line arguments.
            length=${#first}
            i=1
            while [ $length -ge $i ] ; do
                prefix=$(echo $first | cut -c 1-$i)
                for c in $@ ; do
                    [ "$prefix" != "$(echo $c | cut -c 1-$i)" ] && break 2
                done
                i=$((i+1))
            done
            if [ $i -gt 1 ] ; then
                prefix=$(echo $first | cut -c 1-$((i-1)) )
            else
                prefix=
            fi
        fi

        if [ -n "$prefix" ] ; then
            # Ensure every command line argument is at least as long
            # as the prefix.
            uniqs=
            for c in $first $@; do
                if [ "$c" = "$prefix" ] ; then
                    prefix=
                    break
                fi
                ct=${c#$prefix}
                if [ "$ct" = "$c" ] ; then
                    prefix=
                    break
                fi
                uniqs="$uniqs $ct"
            done
        fi

        if [ -n "$prefix" ] ; then
            # When prefix still set, then save the trimmed version as
            # the new command line arguments.
            set -- $uniqs
        else
            # When prefix is not set, then save the original command
            # line arguments, including the first one.
            set -- $first $@
        fi

        first=$1
        shift

        if [ -z "$suffix" ] ; then
            # Attempt to determine the common suffix for all of the
            # potentially trimmed command line arguments.
            length=${#first}
            i=0
            while [ $length -gt $i ] ; do
                fi=$((length-i))
                suffix=$(echo $first | cut -c $fi-$length)
                for c in $@ ; do
                    cl=${#c}
                    ci=$((cl-i))
                    [ $ci -eq 0 ] && break 2
                    [ "$suffix" != "$(echo $c | cut -c $ci-$cl)" ] && break 2
                done
                i=$((i+1))
            done
            if [ $i -gt 0 ] ; then
                suffix=$(echo $first | cut -c $((length - i + 1))-$length)
            else
                suffix=
            fi
        fi

        if [ -n "$suffix" ] ; then
            # Ensure every potentially already trimmed command line
            # arguments are at least as long as the suffix.
            uniqs=
            for c in $first $@; do
                if [ "$c" = "$suffix" ] ; then
                    suffix=
                    break
                fi
                ct=${c%$suffix}
                if [ "$ct" = "$c" ] ; then
                    prefix=
                    break
                fi
                uniqs="$uniqs $ct"
            done
        fi

        if [ -n "$suffix" ] ; then
            # When suffix still set, then save the trimmed version as
            # the new command line arguments.
            set -- $uniqs
        else
            # When suffix is not set, then save the original command
            # line arguments, including the first one.
            set -- $first $@
        fi
    fi

    if [ -n "$group" ] && [ -z "$name" ] ; then
		if [ $# -eq 1 ] ; then
			name=
		elif [ -n "$prefix" ] ; then
			if [ -n "$suffix" ] ; then
				name="${prefix}*${suffix}"
			else
				name=$prefix
			fi
		elif [ -n "$suffix" ] ; then
			name=$suffix
		else
			name=group$$
		fi
	fi

	# echo PREFIX: [$prefix]
	# echo SUFFIX: [$suffix]
	# echo NAME: [$name]
	# echo ARGS: $@
	# return

	for title ; do
        host=${prefix}${title}${suffix}
        if [ -n "$debug" ] ; then
            echo "$prefix<$title>$suffix"
            # echo "ssh -t $host $command"
            continue
        fi

        if [ -n "$TMUX" ] ; then
            if [ -n "$name" ] ; then
                # For tmux, when grouping, create a single new window
                # named by the group name, then create a pane for each
                # host.
                if [ -z "$target" ] ; then
                    # create new window, saving target name
                    target=$(tmux new-window -P -c $HOME -d -n $name ssh -t $host $command)
                    tmux set-option -t $target -w synchronize-panes on
                    # tmux set-option -t $target -w set-titles-string $title
                elif ! tmux split-window -c $HOME -t $target ssh -t $host $command 2>/dev/null ; then
                    # NOTE: cannot split-window when too small, so re-tile panes in window and try again
                    tmux select-layout -t $target tiled
                    sleep 0.3
                    tmux split-window -c $HOME -t $target ssh -t $host $command
                    if [ $? -ne 0 ] ; then
                        echo >&2 "tmux cannot split-window when too small"
                        return 1
                    fi
                fi
            else
                # For tmux, when not grouping, create a new window for
                # each host.
                tmux new-window -c $HOME -d -n $title ssh -t $host $command
            fi
        elif [[ $TERM =~ ^screen ]]; then
            # For screen, when not grouping, create a new window for
            # each host. When grouping, create a new window for each
            # host, using the group name to prefix the window name.
            #
            # TODO: When not grouping, create a new window for each
            # host in the current session, using the group name to
            # prefix the window name. When grouping, create a new
            # session named from the group, then create a new window
            # in that session for each host.
            screen -t "$title" ssh -t $host $command
        elif [ "$TERM_PROGRAM" == "Apple_Terminal" ] ; then
            # For Apple Terminal, when not grouping, create a new tab
            # in the current window for each host. When grouping,
            # create new window and then create a new tab in that
            # window for each host.
            if [ -n "$target" -o -z "$name" ] ; then
                osascript \
                    -e "tell application \"Terminal\"" \
                    -e "  tell application \"System Events\" to keystroke \"t\" using {command down}" \
                    -e "  do script \"ssh -t $host \\\"$command\\\"\" in front window" \
                    -e "end tell" > /dev/null
            else
                osascript \
                    -e "tell application \"Terminal\"" \
                    -e "  tell application \"System Events\" to keystroke \"n\" using {command down}" \
                    -e "  do script \"ssh -t $host \\\"$command\\\"\" in front window" \
                    -e "end tell" > /dev/null
                target=done
            fi
        elif [ "$TERM_PROGRAM" == "iTerm.app" ] ; then
            # For iTerm, when not grouping, create a new tab in the
            # current window for each host. When grouping, create new
            # window and then create a new tab in that window for each
            # host.
            if [ -n "$target" -o -z "$name" ] ; then
                osascript \
                    -e "tell application \"iTerm2\"" \
                    -e "  tell current window" \
                    -e "    create tab with default profile command \"ssh -t $host \\\"$command\\\"\"" \
                    -e "  end tell" \
                    -e "end tell" > /dev/null
            else
                osascript \
                    -e "tell application \"iTerm2\"" \
                    -e "  set newWindow to (create window with default profile command \"ssh -t $host \\\"$command\\\"\")" \
                    -e "end tell" > /dev/null
                target=done
            fi
        else
            ssh -t $host $command
        fi
    done

    if [ -z "$debug" -a -n "$TMUX" -a -n "$name" ] ; then
        # NOTE: Perform a final rebalance of-tile the panes in the tmux window
        tmux select-layout -t $target tiled
    fi
}

case $# in
    0) : ;;
    *) mtsh "$@" ;;
esac
